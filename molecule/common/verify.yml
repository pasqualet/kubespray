---
- name: Verify
  hosts: all
  vars:
    k8s_services:
      - etcd
      - kubelet
    runtime_services:
      docker:
        - docker
      containerd:
        - containerd
      crio:
        - crio
  tasks:
    - name: Get service facts
      service_facts:

    - name: Check Kubernetes services
      with_items: "{{ k8s_services }}"
      assert:
        that:
          - ansible_facts.services["{{ item }}.service"].status == "enabled"
          - ansible_facts.services["{{ item }}.service"].state == "running"

    - name: Check runtime services
      with_items: "{{ runtime_services[container_manager] }}"
      assert:
        that:
          - ansible_facts.services["{{ item }}.service"].status == "enabled"
          - ansible_facts.services["{{ item }}.service"].state == "running"


- name: Verify Kubernetes
  hosts: kube-master[0]
  vars:
    kubectl_args: --kubeconfig /etc/kubernetes/admin.conf
    k8s_daemonsets:
      - namespace: kube-system
        name: kube-proxy
        ready: 3
      - namespace: kube-system
        name: nodelocaldns
        ready: 3
    k8s_deployments:
      - namespace: kube-system
        name: dns-autoscaler
        replicas: 1
        ready_replicas: 1
      - namespace: kube-system
        name: coredns
        replicas: 2
        ready_replicas: 2
    network_daemonsets:
      calico:
        - namespace: kube-system
          name: calico-node
          ready: 3
      canal:
        - namespace: kube-system
          name: canal-node
          ready: 3
      cilium:
        - namespace: kube-system
          name: cilium
          ready: 3
    network_deployments:
      calico:
        - namespace: kube-system
          name: calico-kube-controllers
          replicas: 1
          ready_replicas: 1
      canal:
        - namespace: kube-system
          name: calico-kube-controllers
          replicas: 1
          ready_replicas: 1
      cilium:
        - namespace: kube-system
          name: cilium-operator
          replicas: 1
          ready_replicas: 1
    node_counts: 3
  tasks:
    - name: Get nodes count
      shell: /usr/local/bin/kubectl {{ kubectl_args }} get nodes -o name | wc -l
      register: nodes_count
      changed_when: false

    - name: Assert nodes count
      assert:
        that:
          - nodes_count.stdout == "{{ node_counts }}"

    - name: Check Kubernetes deployments replicas
      shell: /usr/local/bin/kubectl {{ kubectl_args }} -n {{ item.namespace }} get deployment {{ item.name }} -o 'go-template={{ "{{" }}.status.readyReplicas{{ "}}" }}/{{ "{{" }}.status.replicas{{ "}}" }}' | grep {{ item.ready_replicas }}/{{ item.replicas }}
      with_items: "{{ k8s_deployments }}"
      changed_when: false

    - name: Check Kubernetes daemonsets
      shell: /usr/local/bin/kubectl {{ kubectl_args }} -n {{ item.namespace }} get daemonset {{ item.name }} -o 'go-template={{ "{{" }}.status.numberReady{{ "}}" }}' | grep {{ item.ready }}
      with_items: "{{ k8s_daemonsets }}"
      changed_when: false

    - name: Check network deployments replicas
      shell: /usr/local/bin/kubectl {{ kubectl_args }} -n {{ item.namespace }} get deployment {{ item.name }} -o 'go-template={{ "{{" }}.status.readyReplicas{{ "}}" }}/{{ "{{" }}.status.replicas{{ "}}" }}' | grep {{ item.ready_replicas }}/{{ item.replicas }}
      with_items: "{{ network_deployments[kube_network_plugin] }}"
      changed_when: false

    - name: Check network daemonsets
      shell: /usr/local/bin/kubectl {{ kubectl_args }} -n {{ item.namespace }} get daemonset {{ item.name }} -o 'go-template={{ "{{" }}.status.numberReady{{ "}}" }}' | grep {{ item.ready }}
      with_items: "{{ network_daemonsets[kube_network_plugin] }}"
      changed_when: false


    - name: Run job
      command: /usr/local/bin/kubectl {{ kubectl_args }} create job test --image hello-world
      register: run_job

    - name: Job is created
      assert:
        that:
          - run_job.rc == 0
          - run_job.stdout == "job.batch/test created"

    - name: Job is completed
      command: /usr/local/bin/kubectl {{ kubectl_args }} wait --for=condition=complete job/test

    - name: Delete job
      command: /usr/local/bin/kubectl {{ kubectl_args }} delete job test
